# coding: utf-8

"""
    Retell SDK

    API for voice AI. Effortlessly integrate human-like Voice AI into your product. | We are building an API that enables your product to provide an intuitive and engaging way for user interaction - through voice.

    The version of the OpenAPI document: 1.0.0
    Contact: founders@retellai.com
    Created by: https://www.retellai.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from retell_ai_python_sdk import schemas  # noqa: F401


class CallDetail(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.AnyTypeSchema,
        ):
        
        
            class MetaOapg:
                
                class properties:
                    end_timestamp = schemas.IntSchema
                    transcript = schemas.StrSchema
                    
                    
                    class transcript_object(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['Utterance']:
                                return Utterance
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['Utterance'], typing.List['Utterance']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'transcript_object':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'Utterance':
                            return super().__getitem__(i)
                    recording_url = schemas.StrSchema
                    public_log_url = schemas.StrSchema
                    
                    
                    class e2e_latency(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                p50 = schemas.NumberSchema
                                p90 = schemas.NumberSchema
                                p95 = schemas.NumberSchema
                                p99 = schemas.NumberSchema
                                max = schemas.NumberSchema
                                min = schemas.NumberSchema
                                num = schemas.NumberSchema
                                __annotations__ = {
                                    "p50": p50,
                                    "p90": p90,
                                    "p95": p95,
                                    "p99": p99,
                                    "max": max,
                                    "min": min,
                                    "num": num,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["p50"]) -> MetaOapg.properties.p50: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["p90"]) -> MetaOapg.properties.p90: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["p95"]) -> MetaOapg.properties.p95: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["p99"]) -> MetaOapg.properties.p99: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["max"]) -> MetaOapg.properties.max: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["min"]) -> MetaOapg.properties.min: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["num"]) -> MetaOapg.properties.num: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["p50", "p90", "p95", "p99", "max", "min", "num", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["p50"]) -> typing.Union[MetaOapg.properties.p50, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["p90"]) -> typing.Union[MetaOapg.properties.p90, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["p95"]) -> typing.Union[MetaOapg.properties.p95, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["p99"]) -> typing.Union[MetaOapg.properties.p99, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["max"]) -> typing.Union[MetaOapg.properties.max, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["min"]) -> typing.Union[MetaOapg.properties.min, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["num"]) -> typing.Union[MetaOapg.properties.num, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["p50", "p90", "p95", "p99", "max", "min", "num", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            p50: typing.Union[MetaOapg.properties.p50, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            p90: typing.Union[MetaOapg.properties.p90, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            p95: typing.Union[MetaOapg.properties.p95, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            p99: typing.Union[MetaOapg.properties.p99, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            max: typing.Union[MetaOapg.properties.max, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            min: typing.Union[MetaOapg.properties.min, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            num: typing.Union[MetaOapg.properties.num, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'e2e_latency':
                            return super().__new__(
                                cls,
                                *args,
                                p50=p50,
                                p90=p90,
                                p95=p95,
                                p99=p99,
                                max=max,
                                min=min,
                                num=num,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    __annotations__ = {
                        "end_timestamp": end_timestamp,
                        "transcript": transcript,
                        "transcript_object": transcript_object,
                        "recording_url": recording_url,
                        "public_log_url": public_log_url,
                        "e2e_latency": e2e_latency,
                    }
        
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["end_timestamp"]) -> MetaOapg.properties.end_timestamp: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["transcript"]) -> MetaOapg.properties.transcript: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["transcript_object"]) -> MetaOapg.properties.transcript_object: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["recording_url"]) -> MetaOapg.properties.recording_url: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["public_log_url"]) -> MetaOapg.properties.public_log_url: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["e2e_latency"]) -> MetaOapg.properties.e2e_latency: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["end_timestamp", "transcript", "transcript_object", "recording_url", "public_log_url", "e2e_latency", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["end_timestamp"]) -> typing.Union[MetaOapg.properties.end_timestamp, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["transcript"]) -> typing.Union[MetaOapg.properties.transcript, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["transcript_object"]) -> typing.Union[MetaOapg.properties.transcript_object, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["recording_url"]) -> typing.Union[MetaOapg.properties.recording_url, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["public_log_url"]) -> typing.Union[MetaOapg.properties.public_log_url, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["e2e_latency"]) -> typing.Union[MetaOapg.properties.e2e_latency, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["end_timestamp", "transcript", "transcript_object", "recording_url", "public_log_url", "e2e_latency", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                end_timestamp: typing.Union[MetaOapg.properties.end_timestamp, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                transcript: typing.Union[MetaOapg.properties.transcript, str, schemas.Unset] = schemas.unset,
                transcript_object: typing.Union[MetaOapg.properties.transcript_object, list, tuple, schemas.Unset] = schemas.unset,
                recording_url: typing.Union[MetaOapg.properties.recording_url, str, schemas.Unset] = schemas.unset,
                public_log_url: typing.Union[MetaOapg.properties.public_log_url, str, schemas.Unset] = schemas.unset,
                e2e_latency: typing.Union[MetaOapg.properties.e2e_latency, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    end_timestamp=end_timestamp,
                    transcript=transcript,
                    transcript_object=transcript_object,
                    recording_url=recording_url,
                    public_log_url=public_log_url,
                    e2e_latency=e2e_latency,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                CallBase,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CallDetail':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from retell_ai_python_sdk.model.call_base import CallBase
from retell_ai_python_sdk.model.utterance import Utterance
