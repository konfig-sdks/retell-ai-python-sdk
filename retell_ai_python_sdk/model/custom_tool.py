# coding: utf-8

"""
    Retell SDK

    API for voice AI. Effortlessly integrate human-like Voice AI into your product. | We are building an API that enables your product to provide an intuitive and engaging way for user interaction - through voice.

    The version of the OpenAPI document: 1.0.0
    Contact: founders@retellai.com
    Created by: https://www.retellai.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from retell_ai_python_sdk import schemas  # noqa: F401


class CustomTool(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "speak_after_execution",
            "speak_during_execution",
            "name",
            "description",
            "type",
            "url",
        }
        
        class properties:
            description = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "custom": "CUSTOM",
                    }
                
                @schemas.classproperty
                def CUSTOM(cls):
                    return cls("custom")
            name = schemas.StrSchema
            url = schemas.StrSchema
            speak_during_execution = schemas.BoolSchema
            speak_after_execution = schemas.BoolSchema
        
            @staticmethod
            def parameters() -> typing.Type['ToolParameter']:
                return ToolParameter
            execution_message_description = schemas.StrSchema
            __annotations__ = {
                "description": description,
                "type": type,
                "name": name,
                "url": url,
                "speak_during_execution": speak_during_execution,
                "speak_after_execution": speak_after_execution,
                "parameters": parameters,
                "execution_message_description": execution_message_description,
            }
    
    speak_after_execution: MetaOapg.properties.speak_after_execution
    speak_during_execution: MetaOapg.properties.speak_during_execution
    name: MetaOapg.properties.name
    description: MetaOapg.properties.description
    type: MetaOapg.properties.type
    url: MetaOapg.properties.url
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["speak_during_execution"]) -> MetaOapg.properties.speak_during_execution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["speak_after_execution"]) -> MetaOapg.properties.speak_after_execution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parameters"]) -> 'ToolParameter': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["execution_message_description"]) -> MetaOapg.properties.execution_message_description: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "type", "name", "url", "speak_during_execution", "speak_after_execution", "parameters", "execution_message_description", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["speak_during_execution"]) -> MetaOapg.properties.speak_during_execution: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["speak_after_execution"]) -> MetaOapg.properties.speak_after_execution: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parameters"]) -> typing.Union['ToolParameter', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["execution_message_description"]) -> typing.Union[MetaOapg.properties.execution_message_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "type", "name", "url", "speak_during_execution", "speak_after_execution", "parameters", "execution_message_description", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        speak_after_execution: typing.Union[MetaOapg.properties.speak_after_execution, bool, ],
        speak_during_execution: typing.Union[MetaOapg.properties.speak_during_execution, bool, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        url: typing.Union[MetaOapg.properties.url, str, ],
        parameters: typing.Union['ToolParameter', schemas.Unset] = schemas.unset,
        execution_message_description: typing.Union[MetaOapg.properties.execution_message_description, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CustomTool':
        return super().__new__(
            cls,
            *args,
            speak_after_execution=speak_after_execution,
            speak_during_execution=speak_during_execution,
            name=name,
            description=description,
            type=type,
            url=url,
            parameters=parameters,
            execution_message_description=execution_message_description,
            _configuration=_configuration,
            **kwargs,
        )

from retell_ai_python_sdk.model.tool_parameter import ToolParameter
