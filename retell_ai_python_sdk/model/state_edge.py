# coding: utf-8

"""
    Retell SDK

    API for voice AI. Effortlessly integrate human-like Voice AI into your product. | We are building an API that enables your product to provide an intuitive and engaging way for user interaction - through voice.

    The version of the OpenAPI document: 1.0.0
    Contact: founders@retellai.com
    Created by: https://www.retellai.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from retell_ai_python_sdk import schemas  # noqa: F401


class StateEdge(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "destination_state_name",
            "speak_during_transition",
            "description",
        }
        
        class properties:
            description = schemas.StrSchema
            destination_state_name = schemas.StrSchema
            speak_during_transition = schemas.BoolSchema
        
            @staticmethod
            def parameters() -> typing.Type['ToolParameter']:
                return ToolParameter
            __annotations__ = {
                "description": description,
                "destination_state_name": destination_state_name,
                "speak_during_transition": speak_during_transition,
                "parameters": parameters,
            }
    
    destination_state_name: MetaOapg.properties.destination_state_name
    speak_during_transition: MetaOapg.properties.speak_during_transition
    description: MetaOapg.properties.description
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destination_state_name"]) -> MetaOapg.properties.destination_state_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["speak_during_transition"]) -> MetaOapg.properties.speak_during_transition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parameters"]) -> 'ToolParameter': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "destination_state_name", "speak_during_transition", "parameters", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destination_state_name"]) -> MetaOapg.properties.destination_state_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["speak_during_transition"]) -> MetaOapg.properties.speak_during_transition: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parameters"]) -> typing.Union['ToolParameter', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "destination_state_name", "speak_during_transition", "parameters", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        destination_state_name: typing.Union[MetaOapg.properties.destination_state_name, str, ],
        speak_during_transition: typing.Union[MetaOapg.properties.speak_during_transition, bool, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        parameters: typing.Union['ToolParameter', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StateEdge':
        return super().__new__(
            cls,
            *args,
            destination_state_name=destination_state_name,
            speak_during_transition=speak_during_transition,
            description=description,
            parameters=parameters,
            _configuration=_configuration,
            **kwargs,
        )

from retell_ai_python_sdk.model.tool_parameter import ToolParameter
