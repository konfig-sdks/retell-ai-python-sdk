# coding: utf-8

"""
    Retell SDK

    API for voice AI. Effortlessly integrate human-like Voice AI into your product. | We are building an API that enables your product to provide an intuitive and engaging way for user interaction - through voice.

    The version of the OpenAPI document: 1.0.0
    Contact: founders@retellai.com
    Created by: https://www.retellai.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from retell_ai_python_sdk import schemas  # noqa: F401


class BookAppointmentCalTool(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "name",
            "cal_api_key",
            "type",
            "event_type_id",
        }
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "book_appointment_cal": "BOOK_APPOINTMENT_CAL",
                    }
                
                @schemas.classproperty
                def BOOK_APPOINTMENT_CAL(cls):
                    return cls("book_appointment_cal")
            name = schemas.StrSchema
            cal_api_key = schemas.StrSchema
            event_type_id = schemas.NumberSchema
            description = schemas.StrSchema
            timezone = schemas.StrSchema
            __annotations__ = {
                "type": type,
                "name": name,
                "cal_api_key": cal_api_key,
                "event_type_id": event_type_id,
                "description": description,
                "timezone": timezone,
            }
    
    name: MetaOapg.properties.name
    cal_api_key: MetaOapg.properties.cal_api_key
    type: MetaOapg.properties.type
    event_type_id: MetaOapg.properties.event_type_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cal_api_key"]) -> MetaOapg.properties.cal_api_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event_type_id"]) -> MetaOapg.properties.event_type_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "name", "cal_api_key", "event_type_id", "description", "timezone", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cal_api_key"]) -> MetaOapg.properties.cal_api_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event_type_id"]) -> MetaOapg.properties.event_type_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> typing.Union[MetaOapg.properties.timezone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "name", "cal_api_key", "event_type_id", "description", "timezone", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        cal_api_key: typing.Union[MetaOapg.properties.cal_api_key, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        event_type_id: typing.Union[MetaOapg.properties.event_type_id, decimal.Decimal, int, float, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        timezone: typing.Union[MetaOapg.properties.timezone, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BookAppointmentCalTool':
        return super().__new__(
            cls,
            *args,
            name=name,
            cal_api_key=cal_api_key,
            type=type,
            event_type_id=event_type_id,
            description=description,
            timezone=timezone,
            _configuration=_configuration,
            **kwargs,
        )
